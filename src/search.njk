---
title: Search
id: search
layout: default.webc
---
<form id="searchForm" class="center" onsubmit="userInput(event)">
  <input id="searchInput" type="text" name="q" placeholder="Search...">
  <button type="submit" aria-label="Search" class="search-icon"><img src="/images/icons/search.svg" alt="Search Icon"></button>
</form>
<div id="searchResults" class="cards"></div>
<style>
  #searchForm {
    display: grid;
    grid-template-columns: auto max-content;
    border-bottom: var(--border);
    max-width: var(--max-line);
    margin: auto;
  }
  #searchForm > * {
    margin: 0;
    border: none;
  }
  #searchForm input {
    padding-inline: 0;
    border-radius: 0;
  }
  #searchForm button {
    padding: 0;
  }
  #searchForm button:hover {
    background-color: var(--color-bg);
    color: var(--color-text);
  }
  #searchForm .search-icon img {
    height: var(--ts-h4);
  }

  a.section {
    text-decoration: none;
  }

  .section.split img {
    max-width: 25vw;

  }
  .search-img {
    border: var(--border);
    border-radius: var(--radius);
  }
</style>
<script>
  const input = document.querySelector("#searchInput")
  const resultsDiv = document.querySelector("#searchResults")
  let urlParams = new URLSearchParams(window.location.search);
  let lastSearch = ""

  if (urlParams.has('q') || urlParams.has('query')) {
    if (urlParams.has('q')) {
      search(urlParams.get('q'))
    } else {
      search(urlParams.get('query'))
    }
  }
  
  function userInput(e) {
    e.preventDefault();
    const q = input.value;
    urlParams.set("q", q);
    history.replaceState(null, null, "?"+urlParams.toString());
    search(q);
  }

  function search(query) {
    if (query != lastSearch) {
      input.value = query
      fetch(`/api/search?q=${query}`)
      .then(res => {
        return res.json()
      })
      .then(res => {
        result = (res.length > 0) ? res.map(generateHTML).join("") : "<p>No results found</p>"
        searchResults.innerHTML = result;
        lastSearch = query
      })
    }
  }

  function generateHTML(page) {
    // Use shareImage instead of screenshot if specified
    let imgCode = ''
    if (page.item.img) {
      imgCode = `<img src="${page.item.img}" alt="${page.item.title}" class="search-img">`
    } else {
      imgCode = `<img src="https://v1.screenshot.11ty.dev/${encodeURIComponent(page.item.url)}/opengraph/" width="1200" height="630" alt="${page.item.title}" class="search-img">`
    }

    return `
      <a class="section split nonresponsive" href="${page.item.url}">
        ${imgCode}
        <div class="text">
          <h2 class="h3">${page.item.title}</h2>
          <p>${page.item.description}</p>
          <span class="button">View Page</span>
        </div>
      </a>
      <hr>
    `;
  }
</script>